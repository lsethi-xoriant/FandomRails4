Instructions for deployment with capistrano

To initialize a new server
--------------------------

1) Copy the "init_server" directory in the /tmp folder of the server, and run the doit.sh script as root. 
WARNING: this script applies several changes to the system as root, it should be checked with care.
When prompted for the password of the app user, set it as per company policy.

For instance, on amazon:
- postgresql-server should be skipped because RDS is used instead
- however the postgresql-client-common and apt-get install postgresql-server-dev-9.3 should be installed anyway 
- the SSH config of the app user should be copied from the ubuntu user
- if the server is public, the app user should not be in the sudoers group

2) Set the SSH keys of the app user: take the app_ssh_config.tgz archive (ask the sysadmin) and copy it as 
the ~/.ssh folder of the app user 

Also execute the following command to allow al hosts with the same key to log in any other host (needed for AWS autoscaling)
cat id_rsa.pub >> authorized_keys

3) When finished, edit the system configuration appropriately: 
- edit /etc/nginx/sites-available/default to change the site virtual host
- if there are locale issues, try setting: 

  LC_ALL="en_US.utf8"

in /etc/environment and rebooting.

4) Create the files that are not versioned; the list can be found in config/deploy.rb (linked_files)

5) Once Fandom has been deployed, manually create the schemas needed for the different tenant: 

  rake apartment:create

6) in case of AWS installation, put the automatic update command in /etc/rc.local:

  sudo -u app -i bash /home/app/bin/aws_remote_update.sh

and, in case of a specific tenant installation, set the hostname of the stage environment in the script itself:

  STAGE_ENVIRONMENT="app@stage.fandomlab.com"

7) consider to activate remote log archiving putting a cron job in app@shado-services

8) consider to change the app prompt putting the AWS name in it; add to ~/.bashrc:

  export PS1='\[\e[1;36m\]\u@AWS-NAME:\w\$\[\e[0m\] '

Deploy with Capistrano
----------------------

to check if the repository is accessible from the server:

$ cap production git:check

to run a new deploy:

$ cap production deploy




